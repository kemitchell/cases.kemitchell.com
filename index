#!/usr/bin/env ruby
require 'yaml'
require 'cgi'

cases = Array.new
tags = Hash.new
claims = Hash.new

Dir.glob '**/meta.yml' do |file|
  data = YAML.load_file(file)
  id = File.dirname(file)
  record = {
    :id => id,
    :style => data['style'],
    :reports => data['reports'],
    :mnemonic => data['mnemonic']
  }
  record[:numbers] = data['numbers'] if data['numbers'].kind_of?(Hash)
  throw file if record[:style].nil?
  cases.push(record)
  data['tags'].each do |tag|
    tags[tag] = [] if tags[tag].nil?
    tags[tag].push(record)
  end
  unless data['claims'].nil?
    data['claims'].each do |claim|
      claims[claim] = [] if claims[claim].nil?
      claims[claim].push(record)
    end
  end
end

def escape(string)
  return CGI::escape_html(string)
end

def report_link(report)
  result = ""
  if report['reporter']
    result = "<a href=https://courtlistener.com/c/#{report['reporter']}/#{report['volume']}/#{report['page']}>"
  end
  result += "#{report['volume']} #{report['reporter']} #{report['page']}"
  if report['reporter']
    result += "</a>"
  end
  if report['court'] && report['year']
    result += " (#{escape(report['court'])} #{escape(report['year'].to_s)})"
  end
  result
end

def case_link(record)
  returned = "<a href=#{record[:id]}>#{escape(record[:style])}</a>"
  if record[:mnemonic]
    returned += " (#{escape(record[:mnemonic])})"
  end
  if record[:reports]
    returned += " " + record[:reports].map { |r| "<cite>#{report_link(r)}</cite>" }.join(', ')
  end
  if record[:numbers]
    returned += ", " + record[:numbers].map do |court, numbers|
      if numbers.kind_of?(Array)
        numbers_list = numbers.map {|x| escape(x) }.join(', ')
      else
        numbers_list = numbers
      end
      "<cite>#{numbers_list} (#{escape(court)})</cite>"
    end.join(', ')
  end
  return returned
end

File.open('index.html', 'w') do |f|
  f.write <<EOS
<!doctype html>
<html lang=en-US>
  <head>
    <meta charset=UTF-8>
    <meta name=viewport content="width=device-width, initial-scale=1">
    <title>Cases</title>
    <link rel=stylesheet href=styles.css>
  </head>
  <body>
  <h1>Cases</h1>
  <p>Jump To: <a href=#alphabetical>Alphabetical</a> <a href=#tags>Tags</a> <a href=#claims>Claims</a></p>
EOS

  # Case List
  cases.sort_by! { |i| i[:style].downcase }
  f.write("<h2 id=alphabetical>Alphabetical</h2>\n")
  f.write("<ul class=twoColumns>\n")
  cases.each do |record|
    f.write("<li>#{case_link(record)}</li>\n")
  end
  f.write("</ul>\n")

  # Tag Index
  f.write("<h2 id=tags>Tags</h2>\n")
  tags.sort.each do |tag, records|
    id = tag.downcase.gsub(/ /, '-').gsub(/[^A-Za-z0-9-]/, '')
    f.write("<h3 id=\"tag:#{id}\">#{escape(tag)}</h3>\n")
    f.write("<ul class=twoColumns>\n")
    records.sort_by! { |i| i[:style].downcase }
    records.each do |record|
      f.write("<li>#{case_link(record)}</li>\n")
    end
    f.write("</ul>\n")
  end

  # Claim Index
  f.write("<h2 id=claims>Claims</h2>\n")
  claims.sort.each do |claim, records|
    id = claim.downcase.gsub(/ /, '-').gsub(/[^A-Za-z0-9-]/, '')
    f.write("<h3 id=\"claim:#{id}\">#{escape(claim)}</h3>\n")
    f.write("<ul class=twoColumns>\n")
    records.sort_by! { |i| i[:style].downcase }
    records.each do |record|
      f.write("<li>#{case_link(record)}</li>\n")
    end
    f.write("</ul>\n")
  end

  f.write("</body>\n")
  f.write("</html>")
end
